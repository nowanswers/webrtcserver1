#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SimpleWebRTC:server');
var http = require('http');
//var https = require('https');
// var fs = require('fs');

// var privateKey = fs.readFileSync('../local.key', 'utf8');
// var certificate = fs.readFileSync('../local.crt', 'utf8');

// var credentials = {key: privateKey, cert: certificate};


/**
 * Get port from environment and store in Express.
 */
console.log('PORT:', process.env.PORT);
var port = normalizePort(process.env.PORT || '80');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//var httpsServer = https.createServer(credentials, app);

//var io = require('socket.io')(httpsServer);
var io = require('socket.io')(server);

var roomserver = require('../roomserver')(io);
//console.log('roomserver:' + roomserver.tag);

var roomapp  = require('../roomapp')(roomserver);
//console.log('roomapp:' + roomapp.get('roomserver').tag);

app.use('/socket', roomapp);


// development error handler
// will print stacktrace
// if (app.get('env') === 'development') {
//   app.use(function(err, req, res, next) {
//     res.status(err.status || 500);
//     res.render('error', {
//       message: err.message,
//       error: err
//     });
//   });
// }

// // production error handler
// // no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// httpsServer.listen(443);
// httpsServer.on('error', onError);
// httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
